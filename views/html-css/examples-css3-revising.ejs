  <section class="container-fluid main-content">
    <h2>CSS3 "Revising" Examples</h2>
    <p>Below are examples of "Revising" CSS (from <a href="https://www.w3.org/Style/CSS/current-work" target="demo_window">https://www.w3.org/Style/CSS/current-work</a>).</p>
    <ul class="bulleted">
      <li>
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssPagedMediaLevel3" aria-expanded="false" aria-controls="cssPagedMediaLevel3">CSS Paged Media Level 3</a></h3>
        <div class="collapse in" id="cssPagedMediaLevel3">
          <div class="well">
            <p>CSS paged media refers to CSS rules to determine setting for the printed page. The style sheet for this site has a @media print set of rules that set the margins for a left facing page to (top right bottom left) 3cm 8cm 3cm 3cm and 3cm 3cm 3cm 8cm for a right facing page. Use your browser's print preview feature to see this.</p>
          </div>
        </div>
      </li>
      <li class="css-selectors">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssSelectorsLevel4" aria-expanded="false" aria-controls="cssSelectorsLevel4">CSS Selectors Level 4</a></h3>
        <div class="collapse" id="cssSelectorsLevel4">
          <div class="well">
            <p>Of the new selectors, I have found the ":not()" selector to be very useful, especially with the experiment classes that we use in our Frontier apps.</p>
            <p>The ":not" selector allows us to target the inverse of an element selector which may be more straightforward than figuring out the selector without the use of ":not()".
            <ul>
              <li>I get styled.</li>
              <li class="ignore-me">I don't get styled because of ":not(.ignore-me).</li>
              <li>I also get styled.</li>
            </ul>
          </div>
        </div>
      </li>
      <li>
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssOverflowModuleLevel3" aria-expanded="false" aria-controls="cssOverflowModuleLevel3">CSS Overflow Module Level 3</a></h3>
        <div class="collapse" id="cssOverflowModuleLevel3">
          <div class="well">
            <p>The only new thing I read about here is the "clip" value for the "overflow" rule. The "clip" value is like "hidden" in that it hides any content outside of the clipped element. However, unlike "hidden", "clip" does not allow any method, programatic or not to scroll the content into view.</p>
            <p class="example overflow-hidden">This paragraph has content outside of the paragraph container. Click the button below and the hidden content will be moved into view.</p>
            <button onclick="scrollContainer('.overflow-hidden')">Click to scroll hidden content.</button>
            <p class="example overflow-clip">This paragraph has content outside of the paragraph container. However, this time the overflow content is clipped. Click the button below to try to scroll the clipped content into view, but it won't work. The "clip" value seems to have some problem with being visible (at least in Chrome) even though it is clipped.</p>
            <button onclick="scrollContainer('.overflow-clip')">Click to try to scroll clipped content.</button>
            <button onclick="changeToOverflow('.overflow-clip')">Click to change the rule value to "overflow".</button>
            <p>Then click the button to try to scroll the content.</p>
          </div>
        </div>
      </li>
<!-- Not supported yet. -->
<!--       <li class="display-module">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssDisplayModuleLevel3" aria-expanded="false" aria-controls="cssDisplayModuleLevel3">CSS Display Module Level 3</a></h3>
        <div class="collapse" id="cssDisplayModuleLevel3">
          <div class="well">
            <p>An addition to the "display" rule is the "box-supress" rule. This addition makes a lot of sense and seems like it will be very useful. The use case is where you want to hide or show an element.</p>
            <p>In the past you would use "display: none" to hide the element, but to show it you had to remember its previous "display" value (such as "inline", "block", etc).</p>
            <p>Now you set the "display" value and leave it and then use "box-supress" to hide or show the element.</p>
            <button onclick="toggleBoxDisplay('.example')">Click here to hide or show the box.</button>
            <p class="example"></p>
          </div>
        </div>
      </li> -->
      <li class="css-pseudo-elements">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssPseudoElementsModuleLevel4" aria-expanded="false" aria-controls="cssPseudoElementsModuleLevel4">CSS Pseudo Elements Module Level 4</a></h3>
        <div class="collapse" id="cssPseudoElementsModuleLevel4">
          <div class="well">
            <p>One of these that is currently supported, but not necessarily settled on for the rule name, is the "::placeholder" pseudo class which allows the "placeholder" attribute to be styled.</p>
            <p>Currently, the accepted standard is ":placeholder-shown", but that is likely to change.</p>
            <p>Example:</p>
            <input placeholder="I'm styled">
            <p>Note: Not all style rules are available. For example, I tried to change the text color of the placeholder and the color still showed as gray in Chrome.</p>
          </div>
        </div>
      </li>
    </ul>
  </section>

<%- contentFor('pageName') %>
cssRevisingExamples

<%- contentFor('cssRevisingExamples') %>
active
