  <section class="container-fluid main-content">
    <h2>CSS3 "Exploring" Examples</h2>
    <p>Below are examples of "Exploring" CSS (from <a href="https://www.w3.org/Style/CSS/current-work" target="demo_window">https://www.w3.org/Style/CSS/current-work</a>).</p>
    <ul class="bulleted">
      <li>
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssExploringNotImplemented" aria-expanded="false" aria-controls="cssExploringNotImplemented">Explored only (no examples)</a></h3>
        <div class="collapse" id="cssExploringNotImplemented">
          <div class="well">
            <p>These are features in this category that I explored, but found out that they are not implemented in any or only a few browsers.</p>
            <ul class="bulleted">
              <li>Device Adaptation: Involves the use of the @viewport rule to help with browser size responsiveness: limited to very few mobile browsers. See <a href="https://www.w3.org/TR/css-device-adapt-1/" target="demo_window">https://www.w3.org/TR/css-device-adapt-1/</a></li>
              <li>Exclusions: Has "wrap-flow" and "wrap-through" rules to control the flow of text around or through other elements. See <a href="https://www.w3.org/TR/css3-exclusions/" target="demo_window">https://www.w3.org/TR/css3-exclusions/</a></li>
              <li>Line grid: Line grid with its "line-snap" rule sounds like a great idea and should add a bit more sharpness to grid-based page layouts. From what I have read this feature will help align all elements to a baseline. See <a href="https://www.w3.org/TR/css-line-grid-1" target="demo_window">https://www.w3.org/TR/css-line-grid-1</a></li>
              <li>Lists level 3: The :marker pseudo class seems like it would be useful and it eliminates the need for the :before pseudo class to add dynamic content to list items. For now, we will just have to use the :before pseudo class. See <a href="https://www.w3.org/TR/css-lists-3/#marker-pseudo-element" target="demo_window">https://www.w3.org/TR/css-lists-3/#marker-pseudo-element</a></li>
              <li>CSS Regions: The CSS Regions feature would provide a way for complex magazine layouts where you have content that needs to be spread across several elements with other elements intermingled. This would be nice to have because you could drop a blob of text in one element and then use that element as the source for the content that would spread through elements that provide a complex layout. See <a href="https://www.w3.org/TR/css-regions-1/" target="demo_window">https://www.w3.org/TR/css-regions-1/</a></li>
              <li>
                <p>CSS Paint API: The CSS Paint API sounds interesting and I wanted to learn it, but it is still just an idea. From what I have read it will allow you to paint the background, content, or highlight of a geometric shape.</p>
                <p> I assume that this may provide flexibility for creating designs on web pages. I wonder what the performance overhead might be and whether or not it would be easier to just use SVG or other images. See <a href="https://www.w3.org/TR/css-paint-api-1/" target="demo_window">https://www.w3.org/TR/css-paint-api-1/</a></p>
              </li>
              <li>CSS Properties and Values API Level 1: This is another idea that is still in draft form. Its idea is to extend the CSS variables (see example on this page) idea into an API to allow developers to extend CSS. See <a href="https://www.w3.org/TR/css-properties-values-api-1/" target="demo_window">https://www.w3.org/TR/css-properties-values-api-1/</a></li>
            </ul>
          </div>
        </div>
      </li>
      <li class="filter-effects">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssFilterEffects" aria-expanded="false" aria-controls="cssFilterEffects">Filter Effects</a></h3>
        <div class="collapse in" id="cssFilterEffects">
          <div class="well">
            <p>Hurray! Finally, one of the features in the "Exploring" list that has good browser support. Below are examples of some of the image filters that are possible.</p>
            <ul class="bulleted">
              <li>
                <p><img src="/img/html-css/oscar-in-dress-100px.jpg" /> original</p>
              </li>
              <li class="grayscale">
                <p><img src="/img/html-css/oscar-in-dress-100px.jpg" /> 100% grayscale</p>
              </li>
              <li class="grayscale-50">
                <p><img src="/img/html-css/oscar-in-dress-100px.jpg" /> 50% grayscale</p>
              </li>
              <li class="blur">
                <p><img src="/img/html-css/oscar-in-dress-100px.jpg" /> 2px blur (doesn't take much to blur)</p>
              </li>
              <li class="invert">
                <p><img src="/img/html-css/oscar-in-dress-100px.jpg" /> 100% invert</p>
              </li>
              <li class="sepia">
                <p><img src="/img/html-css/oscar-in-dress-100px.jpg" /> 100% sepia</p>
              </li>
            </ul>
          </div>
        </div>
      </li>
      <li class="generated-content">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssGeneratedContentPagedMedia" aria-expanded="false" aria-controls="cssGeneratedContentPagedMedia">CSS Generated Content for Paged Media</a></h3>
        <div class="collapse" id="cssGeneratedContentPagedMedia">
          <div class="well">
            <p>The numbers in the list before are generated using the "counter-increment" rule along with the ":before" pseudo class. The "counter-reset" rule sets up a scope for the variable.</p>
            <ol class="examples">
              <li><p>Each of these.</p></li>
              <li><p>Is prefixed</p></li>
              <li><p>With a generated</p></li>
              <li><p>"Example" and number.</p></li>
            </ol>
          </div>
        </div>
      </li>
      <li class="page-floats">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssPageFloats" aria-expanded="false" aria-controls="cssPageFloats">CSS Page Floats</a></h3>
        <div class="collapse" id="cssPageFloats">
          <div class="well">
            <p>Below are examples of the new "float" rule values "inline-start" and "inline-end". You will need to view the examples in <a href="https://www.mozilla.org/en-US/firefox/developer/" target="demo_window">Firefox Developer Edition</a>.</p>
            <p>Which element appears on the left or the right with "inline-start" or "inline-end" depends on the direction specified for the text.</p>
            <p>With "float: left;", the element would always be floated left. With "float: inline-start;" the element will be on the left if the text direction is left to right or on the right is the text direction is right to left.</p>
            <ul class="ltr" dir="ltr">
              <li>
                <p>This is the 1st element.</p>
              </li>
              <li>
                <p>This is the 2nd element.</p>
              </li>
              <li>
                <p>This is the 3rd element.</p>
              </li>
            </ul>
            <ul class="rtr" dir="rtl">
              <li>
                <p>This is the 1st element.</p>
              </li>
              <li>
                <p>This is the 2nd element.</p>
              </li>
              <li>
                <p>This is the 3rd element.</p>
              </li>
            </ul>
          </div>
        </div>
      </li>
<!-- No browser support yet -->
<!--       <li class="line-grid">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssLineGrid" aria-expanded="false" aria-controls="cssLineGrid">CSS Line Grid</a></h3>
        <div class="collapse" id="cssLineGrid">
          <div class="well">
            <p>This text does not have the "line-snap" rule. Donec ullamcorper nulla non metus auctor fringilla. Donec id elit non mi porta gravida at eget metus.</p>
            <p class="line-snap">This text does have the "line-snap" rule. Donec ullamcorper nulla non metus auctor fringilla. Donec id elit non mi porta gravida at eget metus.</p>
          </div>
        </div>
      </li> -->
<!-- No browser support yet -->
<!--       <li class="list-items">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssListsLevel3" aria-expanded="false" aria-controls="cssListsLevel3">CSS Lists Level 3</a></h3>
        <div class="collapse" id="cssListsLevel3">
          <div class="well">
            <p>List items are getting a ":marker" pseudo class to add custom list markers and allows them to be styled with common CSS rules.</p>
            <ol class="example">
              <li>List item 1.</li>
              <li>List item 2.</li>
              <li>List item 3.</li>
            </ol>
          </div>
        </div>
      </li> -->
      <li class="positioned-layout">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssPositionedLayoutLevel3" aria-expanded="false" aria-controls="cssPositionedLayoutLevel3">CSS Positioned Layout Level 3</a></h3>
        <div class="collapse" id="cssPositionedLayoutLevel3">
          <div class="well">
            <p>This feature now includes "position: sticky". Scroll the page and you will see the 'sticky' element stay in view within a parent element until that parent element scrolls out of view. (You may have to resize the window to be able to scroll the page enough.) You must specify a position (i.e. top, right, bottom, left) for the "sticky" value to have any effect.</p>
            <p class="example sticky">Sticky</p>
            <p class="example">Not sticky</p>
          </div>
        </div>
      </li>
<!--       <li class="css-regions">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssRegions" aria-expanded="false" aria-controls="cssRegions">CSS Regions</a></h3>
        <div class="collapse" id="cssRegions">
          <div class="well">
            <p>The CSS Regions feature provides a way for complex magazine layouts where you have content that needs to be spread across several elements with other elements intermingled.
            <div id="content">Here is some text that will start in this box that will be followed by a box with an image in it. This is the text that should be in the other box after the image.</div>
            <div class="region"></div>
            <div class="image"><img src=""></div>
            <div class="region"></div>
          </div>
        </div>
      </li> -->
      <li class="non-element-selectors">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#nonElementSelectors" aria-expanded="false" aria-controls="nonElementSelectors">Non-element Selectors</a></h3>
        <div class="collapse" id="nonElementSelectors">
          <div class="well">
            <p>This feature sounds like another one that is very much in development. While researching what it is I came across the "::selection" pseudo selector. Here are examples for it.</p>
            <ul class="examples">
              <li class="highlight-green">Select this text and it will highlight in green.</li>
              <li class="highlight-yellow">Select this text and it will highlight in yellow.</li>
            </ul>
            <p>The only CSS properties that will work with this selector are color, background, and text-shadow.
          </div>
        </div>
      </li>
      <li class="inline-layout-module">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssInlineLayoutModuleLevel3" aria-expanded="false" aria-controls="cssInlineLayoutModuleLevel3">CSS Inline Layout Module Level 3</a></h3>
        <div class="collapse" id="cssInlineLayoutModuleLevel3">
          <div class="well">
            <p>Here are examples of the values for the "dominant-baseline" property. It is a property for SVG images.</p>
            <svg width=100% height=200>
              <line x1=10 x2=920 y1=50.5 y2=50.5 style="stroke: green"></line>
              <g class="terms" transform="translate(20,50.5)">
                <text x=0 style="dominant-baseline: alphabetic;">alphabetic</text>
                <text x=100 style="baseline-shift: -24%;">baseline shift</text>
                <text x=200 style="dominant-baseline: ideographic;">ideographic</text>
                <text x=300 style="dominant-baseline: hanging;">hanging</text>
                <text x=400 style="dominant-baseline: mathematical;">mathematical</text>
              </g>
              <line x1=10 x2=920 y1=150.5 y2=150.5 style="stroke: green"></line>
              <g class="terms" transform="translate(20,150.5)">
                <text x=100 style="dominant-baseline: middle;">middle</text>
                <text x=200 style="dominant-baseline: central;">central</text>
                <text x=300 style="dominant-baseline: text-before-edge;">text-before-edge</text>
                <text x=400 style="dominant-baseline: text-after-edge;">text-after-edge</text>
              </g>
            </svg>
          </div>
        </div>
      </li>
      <li class="motion-path">
        <h3><a href="javascript:;" onclick="animateFish()" data-toggle="collapse" data-target="#motionPathModuleLevel1" aria-expanded="false" aria-controls="motionPathModuleLevel1">Motion Path Module Level 1</a></h3>
        <div class="collapse" id="motionPathModuleLevel1">
          <div class="well example">
            <p>The "motion-path" property provides a way to animate an object along a path. This is already supported in Chrome possibly because Chrome is dropping SMIL.</p>
            <p>Below is an SVG with an oval outline and a fish outline. The motion path (which is separate from the SVG oval) is defined in CSS and JavaScript is used to animate the fish along that path. (In this example, the fish will go around 3 times.)</p>
            <svg xmlns="http://www.w3.org/2000/svg" width="300" height="200" viewBox="-50 -50 400 300">
            <defs>
                <style>
                  .oval-path {
                    fill: none;
                    stroke: #808080;
                    stroke-width: 1px;
                  }
                  .fish {
                    fill: #ababab;
                    stroke: #000;
                    stroke-width: 1px;
                    fill-rule: evenodd;
                  }
                </style>
              </defs>
              <path class="oval-path" d="M0 100
                 A 150 100, 0, 1, 1, 300 100
                 A 150 100, 0, 1, 1, 0 100
                 Z"
              />
              <path id="fish" class="fish" d="M4.178,27.949c-2.1-2.882-7.087-16.8-1.891-17.385S17.413,19.221,22.47,20.831c4.437,1.412,5.179,1.362,8.371-.151A46.59,46.59,0,0,1,41.4,15.24C36.459,7.645,28.158,2.33,32.28,1.1,35.712,0.078,47.063-.336,58.945.313,75.81,1.239,82.3,6.423,85.207,12.444c17,5.256,24.122,19.681,23.782,22.584-0.14,1.214-12.39,9.621-31.964,10.049-2.836,5.962-6.559,13.318-10.008,15.175-4,2.154-6.358-.437-7.841-6.638a12.087,12.087,0,0,1,1.116-8.774c-1.633-.18-3.224-0.422-4.769-0.714-0.152.058-.318,0.114-0.5,0.17-3.243,1.016-18.11,1.091-18.759-.509a9.448,9.448,0,0,1-.31-6.684q-1.3-.7-2.469-1.4c-5.322-2.636-6.417-2.3-10.992-.931-4.6,1.37-14.74,15.652-17.394,12.8s-1.365-13.314-.95-15.526S6.281,30.829,4.178,27.949Z"/>
            </svg>
<!--             <svg xmlns="http://www.w3.org/2000/svg" width="109" height="61" viewBox="0 0 109 61" id="fish" class="fish">
              <metadata><?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
            <x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c138 79.159824, 2016/09/14-01:09:01        ">
               <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
                  <rdf:Description rdf:about=""/>
               </rdf:RDF>
            </x:xmpmeta>
            <?xpacket end="w"?></metadata>
            <defs>
                <style>
                  .cls-1 {
                    fill: none;
                    stroke: #000;
                    stroke-width: 1px;
                    fill-rule: evenodd;
                  }
                </style>
              </defs>
            </svg> -->
          </div>
        </div>
      </li>
      <li class="css-basic-ui-module">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssBasicUIModuleLevel4" aria-expanded="false" aria-controls="cssBasicUIModuleLevel4">CSS Basic User Interface Module Level 4</a></h3>
        <div class="collapse" id="cssBasicUIModuleLevel4">
          <div class="well">
            <p>Of the draft changes to the CSS Basic User Interface Module section, there are a couple that I think are interesting: "text-overflow: fade" which would be used to fade out text that is clipped by its element and two related rules for caret animation and caret shape where you could alternate the color of a cursor and change its shape.</p>
            <p>Perhaps one of the most useful rules that is available in this CSS section is the "box-sizing" which helps standardize the box model across browsers. It lets you specify what is included in the size of an element: just the content or the content and the padding, border, and margin.</p>
            <p>Examples of "box-sizing":</p>
            <ul class="examples">
              <li class="box-sizing-border-box">
                The CSS height & width of this box includes everything.
              </li>
              <li class="box-sizing-content-box">
                The size of this box does not include the padding, border, or margin. So it is bigger because the padding, border, and margin sizes are added on to the content size.
              </li>
            </ul>
          </div>
        </div>
      </li>
<!--       <li>
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssPaintingApiLevel1" aria-expanded="false" aria-controls="cssPaintingApiLevel1">CSS Painting API Level 1</a></h3>
        <div class="collapse" id="cssPaintingApiLevel1">
          <div class="well">
          </div>
        </div>
      </li> -->
<!--       <li>
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssPropertiesValuesApiLevel1" aria-expanded="false" aria-controls="cssPropertiesValuesApiLevel1">CSS Properties and Values API Level 1</a></h3>
        <div class="collapse" id="cssPropertiesValuesApiLevel1">
          <div class="well">
          </div>
        </div>
      </li> -->
      <li class="css-color-module">
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#cssColorModuleLevel4" aria-expanded="false" aria-controls="cssColorModuleLevel4">CSS Color Module Level 4</a></h3>
        <div class="collapse" id="cssColorModuleLevel4">
          <div class="well">
            <p>Finally, we have an example of a color property you may never use, but I think is interesting. The ability to have an emphasis color (and character) of an element different than the main color.</p>
            <p class="example">This sentence has a word that needs <strong>emphasis</strong>. If "text-emphasis" or "text-emphasis-color" is not supported in the browser you are using, you will just see the word "emphasis" in the current style for &lt;strong&gt;. Try using Firefox to see the effect of "text-emphasis." Then ask yourself: "Why would I use this?"</p>
          </div>
        </div>
      </li>
    </ul>
  </section>

<%- contentFor('pageName') %>
cssExploringExamples

<%- contentFor('cssExploringExamples') %>
active
