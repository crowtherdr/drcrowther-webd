  <section class="container-fluid main-content">
    <h2>Web Components Examples</h2>
    <ul class="bulleted">
      <li>
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#ceExample" aria-expanded="false" aria-controls="ceExample">Custom Element Example using Plain Old JavaScript (POJ)</a></h3>
        <div class="collapse in" id="ceExample">
          <div class="well">
            <p>This example works in Chrome.</p>
            <p>Note: The custom elements on this will show as a 100 pixel red square until they are resolved. This is to show that 'unresolved' elements can be styled to avoid a "flash of unresolved content". Ideally, you will style the elements to look as close as possible like their finished state.</p>
            <p>The following photo is placed on the page with the use of a web component that I made. It's element is &lt;image-vignette&gt;. Its attributes are the "src" which is the path and file of the image. You can also specify the "height" and "width".</p>
            <p>Of course you can just use the "img" tag and style it to look like this. However, this shows that you can make a web component and have all the HTML and CSS contained within the component.</p>
            <image-vignette src="/img/casual-me.jpg" height="300" width="300"></image-vignette>
            <p>This is &lt;image-vignette&gt; which creates the HTML and attaches a CSS file (black border).</p>
            <template id="imgvtemplate">
              <style>
                :host {
                  border: 2px solid green;
                  -moz-border-radius: 100%;
                  -webkit-border-radius: 100%;
                  border-radius: 100%;
                  display: inline-block;
                  overflow: hidden;
                }

                :host .fade {
                    height: 100%;
                    width: 100%;
                    position:absolute;
                    background: -webkit-linear-gradient(
                      left,
                      rgba(0,0,0,0.65) 0%,
                      rgba(0,0,0,0) 20%,
                      rgba(0,0,0,0) 80%,
                      rgba(0,0,0,0.65) 100%
                    );
                }

                :host img {
                }
              </style>
              <img />
            </template>
            <image-vignetteT src="/img/casual-me.jpg" height="300" width="300"></image-vignetteT>
            <p>This is &lt;image-vignetteT&gt; which uses an HTML template and :host CSS (green border).</p>
            <p>The term "lifecycle callbacks", with regards to Web Components, refers to events that occur in the creation and lifetime of a web component. For example, events fire when a component is done loading and when its properties change.</p>
            <p>I created the &lt;image-vignette&gt; in two different ways. The first way made use of an "attributeChangedCallback" to update the rendering. The second, and current, way does not have any implemented callbacks. I think the component was much easier to implement with the second method. However, it is missing the callback functions and does not update the attributes when added to the page using JavaScript.</p>
            <p>&lt;image-vignetteT&gt; is the most self-contained implementation and uses callbacks.</p>
            <p>This instance of &lt;image-vignette&gt; was added using JavaScript:</p>
            <p id="JavascriptImageVignette"></p>
          </div>
        </div>
      </li>
      <li>
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#typeExtensionElement" aria-expanded="false" aria-controls="typeExtensionElement">Type Extension Element</a></h3>
        <div class="collapse" id="typeExtensionElement">
          <div class="well">
            <p>The idea of extending existing elements is to inherit all the capability and style of an element and add to it. Extending and element involves writing a class that extends a specific HTML element and not the generic "HTMLElement" and then adding the "is" attribute to the HTML tag with the name of the defined extension as in:</p>
            <p><img id="VignetteImg" is="vignette-img" src="/img/casual-me.jpg" height="200" width="200" /></p>
            <p>The image is shown using a plain &lt;img&gt; tag. The styling is added by extending the tag.</p>
            <p>A limitation that I found with the &lt;img&gt; tag is that you cannot create a shadow root for it. I assume that would be the same for any tag that does not have a closing tag.</p>
            <p>Thanks to <a href="http://norman-amy.github.io/assets/js/badges/wc-journeyman/github-wc-extended/index.html" target="_blank">norman-amy's example</a> for the help with this.
          </div>
        </div>
      </li>
      <li>
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#xtagExample" aria-expanded="false" aria-controls="xtagExample">X-Tag Examples</a></h3>
        <div class="collapse" id="xtagExample">
          <div class="well">
            <p>Xtag is a JavaScript library that wraps the Web Components API to make web component development much faster.</p>
            <p>Here is the x-clock tag example from <a href="http://x-tag.github.io/overview">http://x-tag.github.io/overview</a>: <x-clock></x-clock></p>
            <p>And here is my image-vignette element written using x-tag:</p>
            <p><x-image-vignette src="/img/casual-me.jpg" height="200" width="200"></x-image-vignette></p>
            <p>It has a tap/click event that changes the border to a random color.</p>
            <p>And here is my extension of the &lt;img&gt; tag using X-Tag:</p>
            <p><img id="XVignetteImg" is="x-vignette-img" src="/img/casual-me.jpg" height="200" width="200" /></p>
            <p>For consistency of code style and implementation, I really like the X-Tag library. Polymer also provides this consistency. Once one web component is completed, stamping out others can be done quickly.</p>
          </div>
        </div>
      </li>
      <li>
        <h3><a href="javascript:;" data-toggle="collapse" data-target="#componentsPerformance" aria-expanded="false" aria-controls="componentsPerformance">Web Components and Performance</a></h3>
        <div class="collapse" id="componentsPerformance">
          <div class="well">
            <p>There are at least 3 techniques related to improving performance for web page loading and for Web Components.</p>
            <ol class="numbered">
              <li>
                <p>Adding the "async" attribute to &lt;link&gt; and &lt;script&gt; tags to prevent blocking. This portfolio site makes use of this attribute for some of these tags. However, you have to be careful because if a resource is not loaded before another resource needs it, especially in the case of JavaScript, you will get errors.</p>
                <p>For example, for this page the X-Tag library does not have the "async" attribute on it to make sure it is available when the script in the page script file needs it.</p>
              </li>
              <li>
                <p>Styling custom elements so they have the basic look that they will have once they are loaded will prevent a flash of unstyled content (FOUC).</p>
                <p>As you reload this page, notice that the custom elements are a 100 pixel red square until they are resolved.</p>
              </li>
              <li>
                <p>Element lazy loading.</p>
                <p>One way to lazy load Polymer elements is to use the Polymer.Base.importHref function. Other techniques make use of the "async" attribute on the &lt;link&gt; and &lt;script&gt; and the Polymer "dom-if" attribute.</p>
              </li>
            </ol>
          </div>
        </div>
      </li>
    </ul>
  </section>
  <!-- Modal -->
<!--   <div id="myModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal">&times;</button>
          <h4 class="modal-title">Some Other Example</h4>
        </div>
        <div class="modal-body">
          <p><img src="../img/javascript/crowtherdr-codewars-profile.jpg" width="570"></p>
        </div>
      </div>

    </div>
  </div>
 -->

<%- contentFor('pageName') %>
wcExamples

<%- contentFor('jsExamples') %>
active
